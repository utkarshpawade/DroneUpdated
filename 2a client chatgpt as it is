#!/usr/bin/env python3

import time
import rclpy
from rclpy.action import ActionClient
from rclpy.node import Node
from my_interfaces.action import NavToWaypoint  # Replace with your actual action message package
from my_interfaces.srv import GetWaypoints      # Replace with your actual service message package

class WayPointClient(Node):

    def __init__(self):
        super().__init__('waypoint_client')
        self.goals = []
        self.goal_index = 0
        
        # Create an action client for the action 'NavToWaypoint' with action name 'waypoint_navigation'.
        self.action_client = ActionClient(self, NavToWaypoint, 'waypoint_navigation')
        
        # Create a client for the service 'GetWaypoints' with service name 'waypoints'.
        self.cli = self.create_client(GetWaypoints, 'waypoints')
        
        while not self.cli.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('Service not available, waiting again...')
        
        # Create a request object for the GetWaypoints service.
        self.request = GetWaypoints.Request()

    ### Action client functions

    def send_goal(self, waypoint):
        # Create a NavToWaypoint goal object.
        goal_msg = NavToWaypoint.Goal()
        goal_msg.waypoint.position.x = waypoint[0]
        goal_msg.waypoint.position.y = waypoint[1]
        goal_msg.waypoint.position.z = waypoint[2]

        # Wait for the action server to be available.
        while not self.action_client.wait_for_server(timeout_sec=1.0):
            self.get_logger().info('Action server not available, waiting again...')
        
        # Send the goal asynchronously and set up callbacks.
        self.send_goal_future = self.action_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback)
        self.send_goal_future.add_done_callback(self.goal_response_callback)

    def goal_response_callback(self, future):
        # Check if the goal was accepted and log accordingly.
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().info('Goal rejected :(')
            return
        self.get_logger().info('Goal accepted :)')

        # Set up a callback for when the result is received.
        self.get_result_future = goal_handle.get_result_async()
        self.get_result_future.add_done_callback(self.get_result_callback)

    def get_result_callback(self, future):
        # Retrieve and log the result.
        result = future.result().result
        self.get_logger().info('Result: {0}'.format(result.hov_time))

        self.goal_index += 1
        if self.goal_index < len(self.goals):
            self.send_goal(self.goals[self.goal_index])
        else:
            self.get_logger().info('All waypoints have been reached successfully')

    def feedback_callback(self, feedback_msg):
        # Log feedback from the action server.
        feedback = feedback_msg.feedback
        x = feedback.current_waypoint.pose.position.x
        y = feedback.current_waypoint.pose.position.y
        z = feedback.current_waypoint.pose.position.z
        t = feedback.current_waypoint.header.stamp.sec
        self.get_logger().info(f'Received feedback! Current position: x={x}, y={y}, z={z}')
        self.get_logger().info(f'Max time inside sphere: {t}')

    # Service client functions

    def send_request(self):
        # Send the GetWaypoints service request and return the future.
        self.get_logger().info('Sending request to get waypoints...')
        return self.cli.call_async(self.request)

    def receive_goals(self):
        # Send the service request and wait for the response.
        future = self.send_request()
        rclpy.spin_until_future_complete(self, future)
        
        response = future.result()
        self.get_logger().info('Waypoints received by the action client')

        # Parse the waypoints and store them in the goals list.
        for pose in response.waypoints.poses:
            waypoints = [pose.position.x, pose.position.y, pose.position.z]
            self.goals.append(waypoints)
            self.get_logger().info(f'Waypoints: {waypoints}')

        # Start navigating to the first waypoint.
        if self.goals:
            self.send_goal(self.goals[0])
        else:
            self.get_logger().info('No waypoints received.')

def main(args=None):
    rclpy.init(args=args)

    waypoint_client = WayPointClient()
    waypoint_client.receive_goals()

    try:
        rclpy.spin(waypoint_client)
    except KeyboardInterrupt:
        waypoint_client.get_logger().info('KeyboardInterrupt, shutting down.\n')
    finally:
        waypoint_client.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
